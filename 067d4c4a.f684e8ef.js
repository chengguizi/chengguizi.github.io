(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{140:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return p}));var r=n(0),i=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=i.a.createContext({}),s=function(e){var t=i.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return i.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),b=s(n),m=r,p=b["".concat(a,".").concat(m)]||b[m]||d[m]||o;return n?i.a.createElement(p,c(c({ref:t},u),{},{components:n})):i.a.createElement(p,c({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var u=2;u<o;u++)a[u]=n[u];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},56:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var r=n(2),i=n(6),o=(n(0),n(140)),a={hide_title:!0,sidebar_label:"Work with Submodules"},c={unversionedId:"productivity/git/git",id:"productivity/git/git",isDocsHomePage:!1,title:"git",description:"Git Practices",source:"@site/docs/productivity/git/git.md",permalink:"/docs/productivity/git/git",editUrl:"https://github.com/chengguizi/chengguizi.github.io/docs/productivity/git/git.md",lastUpdatedAt:1597829776,sidebar_label:"Work with Submodules",sidebar:"gitSidebar"},l=[{value:"Git Submodule",id:"git-submodule",children:[{value:"To make the git push work",id:"to-make-the-git-push-work",children:[]},{value:"Modify the .gitmodules file correctly",id:"modify-the-gitmodules-file-correctly",children:[]},{value:"To convert the existing submodule to the correct branch",id:"to-convert-the-existing-submodule-to-the-correct-branch",children:[]},{value:"Alias",id:"alias",children:[]}]}],u={rightToc:l};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"git-practices"},"Git Practices"),Object(o.b)("h2",{id:"git-submodule"},"Git Submodule"),Object(o.b)("h3",{id:"to-make-the-git-push-work"},"To make the git push work"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"git config --global push.default matching"))),Object(o.b)("h3",{id:"modify-the-gitmodules-file-correctly"},"Modify the .gitmodules file correctly"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"git config -f .gitmodules submodule.edt.branch linear_dt")),Object(o.b)("h3",{id:"to-convert-the-existing-submodule-to-the-correct-branch"},"To convert the existing submodule to the correct branch"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"if the local branch does no exist yet:",Object(o.b)("blockquote",{parentName:"li"},Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("inlineCode",{parentName:"p"},"git checkout -b linear_dt --track origin/linear_dt")))),Object(o.b)("li",{parentName:"ul"},"else, the local branch with the same name already exist, do",Object(o.b)("blockquote",{parentName:"li"},Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("inlineCode",{parentName:"p"},"git branch -u origin/linear_dt"))))),Object(o.b)("h3",{id:"alias"},"Alias"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"add the following file content to ",Object(o.b)("inlineCode",{parentName:"p"},"/.git/config"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"add ",Object(o.b)("inlineCode",{parentName:"p"},"git sm-trackbranch")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),'[alias]\n#git sm-trackbranch : places all submodules on their respective branch specified in .gitmodules\n#This works if submodules are configured to track a branch, i.e if .gitmodules looks like :\n#[submodule "my-submodule"]\n#   path = my-submodule\n#   url = git@wherever.you.like/my-submodule.git\n#   branch = my-branch\nsm-trackbranch = "! git submodule foreach --recursive \'branch=\\"$(git config -f $toplevel/.gitmodules submodule.$name.branch)\\"; git checkout $branch\'"\n\n#sm-pullrebase :\n# - pull --rebase on the master repo\n# - sm-trackbranch on every submodule\n# - pull --rebase on each submodule\n#\n# Important note :\n#- have a clean master repo and subrepos before doing this !\n#- this is *not* equivalent to getting the last committed \n#  master repo + its submodules: if some submodules are tracking branches \n#  that have evolved since the last commit in the master repo,\n#  they will be using those more recent commits !\n#\n#  (Note : On the contrary, git submodule update will stick \n#to the last committed SHA1 in the master repo)\n#\nsm-pullrebase = "! git pull --rebase; git submodule update; git sm-trackbranch ; git submodule foreach \'git pull --rebase\' "\n\n# git sm-diff will diff the master repo *and* its submodules\nsm-diff = "! git diff && git submodule foreach \'git diff\' "\n\n#git sm-push will ask to push also submodules\nsm-push = push --recurse-submodules=on-demand\n\n#git alias : list all aliases\nalias = "!git config -l | grep alias | cut -c 7-"\n')))))}s.isMDXComponent=!0}}]);